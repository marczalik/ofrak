name: Deploy packkage and verify

on:
  workflow_dispatch:
  push:

permissions:
  contents: read
  
defaults:
  run:
    shell: bash
    
jobs:
  build-base-image:   
      name: Build the common base OFRAK Docker image
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            lfs: true
        - uses: actions/setup-python@v4
          with:
            python-version: '3.7'
            cache: pip
            cache-dependency-path: '**/setup.py'
        - name: Cache base image
          id: cache-image
          uses: actions/cache@v3
          with:
            key: ofrak-core-dev
            path: ofrak-base.tar.gz
        - name: Build base image
          # Always rebuild the base image when the scheduled workflow runs
          if: inputs.flush_cache || steps.cache-image.outputs.cache-hit != 'true' || github.event_name == 'schedule'
          run: |
            python3 -m pip install PyYAML
            DOCKER_BUILDKIT=1 python3 build_image.py --config ofrak-core-dev.yml --base 
        - name: Export base image
          if: inputs.flush_cache || steps.cache-image.outputs.cache-hit != 'true' || github.event_name == 'schedule'
          run: |
            sudo apt install pigz pv
            docker save redballoonsecurity/ofrak/core-dev-base:latest \
              | pigz -9 \
              | pv --size 2400m --interval 5 --force \
              > ofrak-base.tar.gz 
              
  install-from-testpypi:
    name: Install OFRAK packages from TestPyPI
    runs-on: ubuntu-latest
    needs: build-base-image
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
          cache: pip
          cache-dependency-path: '**/setup.py'
      - name: Cache base image
        id: cache-image
        uses: actions/cache@v3
        with:
          key: ofrak-core-dev
          path: ofrak-base.tar.gz
      - name: Load base image
        run: |
          sudo apt install pv
          pv --interval 5 --force ofrak-base.tar.gz \
            | docker load 
          docker images
      - name: Install from TestPyPI
        # TODO: Can this be broken up?
        run: |
          docker run \
            --interactive \
            --rm \
            --entrypoint bash \
            redballoonsecurity/ofrak/core-dev-base:latest \
            -c  "apt-get update && apt-get install -y python3-dev libffi-dev build-essential virtualenvwrapper \
                && apt-get install git-lfs -y \
                && git clone https://github.com/redballoonsecurity/ofrak.git \
                && cd ofrak/ofrak_core && make install && cd / \
                && pip install --upgrade pip \
                && python3 -m pip install --upgrade --no-deps --force-reinstall --pre -i https://test.pypi.org/simple/ ofrak-type \
                && python3 -m pip install --upgrade --no-deps --force-reinstall --pre -i https://test.pypi.org/simple/ ofrak-io \
                && python3 -m pip install --upgrade --no-deps --force-reinstall --pre -i https://test.pypi.org/simple/ ofrak \
                && python3 -m pip install --upgrade --no-deps --force-reinstall --pre -i https://test.pypi.org/simple/ ofrak-patch-maker \
                && rm -rf /usr/local/lib/python3.7/site-packages/ofrak_io_test /usr/local/lib/python3.7/site-packages/ofrak_type_test /usr/local/lib/python3.7/site-packages/ofrak_patcher_maker_test /usr/local/lib/python3.7/site-packages/ofrak_test \
                && rm -rf /ofrak/ofrak_type/ofrak_type /ofrak/ofrak_io/ofrak_io /ofrak/ofrak_patch_maker/ofrak_patch_maker /ofrak/ofrak_core/ofrak \
                && python3 -m pytest -n auto ofrak/ofrak_type --cov=/usr/local/lib/python3.7/site-packages/ofrak_type --cov-report=term-missing --import-mode append \
                && fun-coverage --cov-fail-under=100 \
                && python3 -m pytest -n auto ofrak/ofrak_io --cov=/usr/local/lib/python3.7/site-packages/ofrak_io --cov-report=term-missing --import-mode append \
                && fun-coverage --cov-fail-under=100 \
                && python3 -m pytest -n auto ofrak/ofrak_patch_maker --cov=/usr/local/lib/python3.7/site-packages/ofrak_patch_maker --cov-report=term-missing --import-mode append \
                && fun-coverage --cov-fail-under=100 \
                && python3 -m pytest -n auto ofrak/ofrak_core --cov=/usr/local/lib/python3.7/site-packages/ofrak --cov-report=term-missing --import-mode append \
                && fun-coverage --cov-fail-under=100"
